using Lab1Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Lab1CMD
{
    internal class Program
    {
        /*static string testMess = "Древнегреческие математики называли этот алгоритм ἀνθυφαίρεσις " +
            "или ἀνταναίρεσις — «взаимное вычитание». " +
            "Этот алгоритм не был открыт Евклидом, так как " +
            "упоминание о нём имеется уже в Топике Аристотеля (IV век до н. э.)[3]." +
            " В «Началах» Евклида он описан дважды — в VII книге для нахождения наибольшего " +
            "общего делителя двух натуральных чисел[1] и в X книге для нахождения наибольшей " +
            "общей меры двух однородных величин[2]. В обоих случаях дано геометрическое " +
            "описание алгоритма, для нахождения «общей меры» двух отрезков.\r\n\r\n" +
            "Историками математики было выдвинуто предположение, " +
            "что именно с помощью алгоритма Евклида (процедуры последовательного взаимного вычитания) " +
            "в древнегреческой математике впервые было открыто " +
            "существование несоизмеримых величин (стороны и диагонали " +
            "квадрата, или стороны и диагонали правильного пятиугольника)[10]. " +
            "Впрочем, это предположение не имеет достаточных документальных " +
            "подтверждений. Алгоритм для поиска наибольшего общего делителя " +
            "двух натуральных чисел описан также в I книге древнекитайского т" +
            "рактата Математика в девяти книгах.";*/
        static string testMess = "Чтобы этого не происходило, используются специальные дополнительные алгоритмы, " +
            "суть которых в том, что каждая предыдущая часть сообщения начинает влиять на следующую.\r\n\r\n" +
            "Упрощённо, это выглядит так. Перед шифрованием, мы применяем к сообщению правило: b := (b + a) % n." +
            " Где a — предыдущая часть сообщения, а b — следующая. То есть наше сообщение (11, 17, 15, 19) " +
            "изменяется. 11 остаётся без изменений. 17 превращается в (11 + 17) % 323 = 28. 15 становится (15 + 28) " +
            "% 323 = 43. A 19 превращается в 62.\r\n\r\nПоследовательность (11, 28, 43, 62) получается «запутанной». " +
            "Все буквы в ней как бы перемешаны, в том смысле, что на каждый код влияет не одна буква, а все предыдущие.";

        static void Main(string[] args)
        {
            ModelingRSACrypting model = new ModelingRSACrypting();

            model.Message = testMess;

            Console.WriteLine("Сообщение");
            Console.WriteLine(model.Message);
            Console.WriteLine("---------");

            model.GenerateKeys();
            model.SendMessage();

            Console.WriteLine("Шифр");
            foreach (ulong[] me in model.CryptedMessage)
            {
                foreach (ulong item in me)
                {
                    Console.Write(item + ";");
                }
                Console.WriteLine();
            }
            Console.WriteLine("---------");

            model.ReadMessage();

            Console.WriteLine("Сообщение");
            Console.WriteLine(model.DecryptedMessage);
            Console.WriteLine("---------");

            Console.ReadLine();
        }

        
    }
}
